union AuthenticatedItem = User

input CreateInitialUserInput {
	email: String
	name: String
	password: String
}

scalar DateTime

input DateTimeNullableFilter {
	equals: DateTime
	gt: DateTime
	gte: DateTime
	in: [DateTime!]
	lt: DateTime
	lte: DateTime
	not: DateTimeNullableFilter
	notIn: [DateTime!]
}

input IDFilter {
	equals: ID
	gt: ID
	gte: ID
	in: [ID!]
	lt: ID
	lte: ID
	not: IDFilter
	notIn: [ID!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type KeystoneAdminMeta {
	enableSessionItem: Boolean!
	enableSignout: Boolean!
	list(key: String!): KeystoneAdminUIListMeta
	lists: [KeystoneAdminUIListMeta!]!
}

type KeystoneAdminUIFieldMeta {
	createView: KeystoneAdminUIFieldMetaCreateView!
	customViewsIndex: Int
	fieldMeta: JSON
	isFilterable: Boolean!
	isOrderable: Boolean!
	itemView(id: ID): KeystoneAdminUIFieldMetaItemView
	label: String!
	listView: KeystoneAdminUIFieldMetaListView!
	path: String!
	search: QueryMode
	viewsIndex: Int!
}

type KeystoneAdminUIFieldMetaCreateView {
	fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
	edit
	hidden
}

type KeystoneAdminUIFieldMetaItemView {
	fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
	edit
	hidden
	read
}

type KeystoneAdminUIFieldMetaListView {
	fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
	hidden
	read
}

type KeystoneAdminUIListMeta {
	description: String
	fields: [KeystoneAdminUIFieldMeta!]!
	hideCreate: Boolean!
	hideDelete: Boolean!
	initialColumns: [String!]!
	initialSort: KeystoneAdminUISort
	isHidden: Boolean!
	itemQueryName: String!
	key: String!
	label: String!
	labelField: String!
	listQueryName: String!
	pageSize: Int!
	path: String!
	plural: String!
	singular: String!
}

type KeystoneAdminUISort {
	direction: KeystoneAdminUISortDirection!
	field: String!
}

enum KeystoneAdminUISortDirection {
	ASC
	DESC
}

type KeystoneMeta {
	adminMeta: KeystoneAdminMeta!
}

type Mutation {
	authenticateUserWithPassword(
		email: String!
		password: String!
	): UserAuthenticationWithPasswordResult
	createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
	createPost(data: PostCreateInput!): Post
	createPosts(data: [PostCreateInput!]!): [Post]
	createTag(data: TagCreateInput!): Tag
	createTags(data: [TagCreateInput!]!): [Tag]
	createTask(data: TaskCreateInput!): Task
	createTasks(data: [TaskCreateInput!]!): [Task]
	createUser(data: UserCreateInput!): User
	createUsers(data: [UserCreateInput!]!): [User]
	deletePost(where: PostWhereUniqueInput!): Post
	deletePosts(where: [PostWhereUniqueInput!]!): [Post]
	deleteTag(where: TagWhereUniqueInput!): Tag
	deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
	deleteTask(where: TaskWhereUniqueInput!): Task
	deleteTasks(where: [TaskWhereUniqueInput!]!): [Task]
	deleteUser(where: UserWhereUniqueInput!): User
	deleteUsers(where: [UserWhereUniqueInput!]!): [User]
	endSession: Boolean!
	updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
	updatePosts(data: [PostUpdateArgs!]!): [Post]
	updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
	updateTags(data: [TagUpdateArgs!]!): [Tag]
	updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
	updateTasks(data: [TaskUpdateArgs!]!): [Task]
	updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
	updateUsers(data: [UserUpdateArgs!]!): [User]
}

input NestedStringFilter {
	contains: String
	endsWith: String
	equals: String
	gt: String
	gte: String
	in: [String!]
	lt: String
	lte: String
	not: NestedStringFilter
	notIn: [String!]
	startsWith: String
}

input NestedStringNullableFilter {
	contains: String
	endsWith: String
	equals: String
	gt: String
	gte: String
	in: [String!]
	lt: String
	lte: String
	not: NestedStringNullableFilter
	notIn: [String!]
	startsWith: String
}

enum OrderDirection {
	asc
	desc
}

type PasswordState {
	isSet: Boolean!
}

type Post {
	author: User
	content: Post_content_Document
	id: ID!
	publishDate: DateTime
	status: String
	tags(
		orderBy: [TagOrderByInput!]! = []
		skip: Int! = 0
		take: Int
		where: TagWhereInput! = {}
	): [Tag!]
	tagsCount(where: TagWhereInput! = {}): Int
	title: String
}

input PostCreateInput {
	author: UserRelateToOneForCreateInput
	content: JSON
	publishDate: DateTime
	status: String
	tags: TagRelateToManyForCreateInput
	title: String
}

input PostManyRelationFilter {
	every: PostWhereInput
	none: PostWhereInput
	some: PostWhereInput
}

input PostOrderByInput {
	id: OrderDirection
	publishDate: OrderDirection
	status: OrderDirection
	title: OrderDirection
}

input PostRelateToManyForCreateInput {
	connect: [PostWhereUniqueInput!]
	create: [PostCreateInput!]
}

input PostRelateToManyForUpdateInput {
	connect: [PostWhereUniqueInput!]
	create: [PostCreateInput!]
	disconnect: [PostWhereUniqueInput!]
	set: [PostWhereUniqueInput!]
}

input PostUpdateArgs {
	data: PostUpdateInput!
	where: PostWhereUniqueInput!
}

input PostUpdateInput {
	author: UserRelateToOneForUpdateInput
	content: JSON
	publishDate: DateTime
	status: String
	tags: TagRelateToManyForUpdateInput
	title: String
}

input PostWhereInput {
	AND: [PostWhereInput!]
	NOT: [PostWhereInput!]
	OR: [PostWhereInput!]
	author: UserWhereInput
	id: IDFilter
	publishDate: DateTimeNullableFilter
	status: StringNullableFilter
	tags: TagManyRelationFilter
	title: StringFilter
}

input PostWhereUniqueInput {
	id: ID
}

type Post_content_Document {
	document(hydrateRelationships: Boolean! = false): JSON!
}

type Query {
	authenticatedItem: AuthenticatedItem
	keystone: KeystoneMeta!
	post(where: PostWhereUniqueInput!): Post
	posts(
		orderBy: [PostOrderByInput!]! = []
		skip: Int! = 0
		take: Int
		where: PostWhereInput! = {}
	): [Post!]
	postsCount(where: PostWhereInput! = {}): Int
	tag(where: TagWhereUniqueInput!): Tag
	tags(
		orderBy: [TagOrderByInput!]! = []
		skip: Int! = 0
		take: Int
		where: TagWhereInput! = {}
	): [Tag!]
	tagsCount(where: TagWhereInput! = {}): Int
	task(where: TaskWhereUniqueInput!): Task
	tasks(
		orderBy: [TaskOrderByInput!]! = []
		skip: Int! = 0
		take: Int
		where: TaskWhereInput! = {}
	): [Task!]
	tasksCount(where: TaskWhereInput! = {}): Int
	user(where: UserWhereUniqueInput!): User
	users(
		orderBy: [UserOrderByInput!]! = []
		skip: Int! = 0
		take: Int
		where: UserWhereInput! = {}
	): [User!]
	usersCount(where: UserWhereInput! = {}): Int
}

enum QueryMode {
	default
	insensitive
}

input StringFilter {
	contains: String
	endsWith: String
	equals: String
	gt: String
	gte: String
	in: [String!]
	lt: String
	lte: String
	not: NestedStringFilter
	notIn: [String!]
	startsWith: String
}

input StringNullableFilter {
	contains: String
	endsWith: String
	equals: String
	gt: String
	gte: String
	in: [String!]
	lt: String
	lte: String
	not: NestedStringNullableFilter
	notIn: [String!]
	startsWith: String
}

type Tag {
	id: ID!
	name: String
	posts(
		orderBy: [PostOrderByInput!]! = []
		skip: Int! = 0
		take: Int
		where: PostWhereInput! = {}
	): [Post!]
	postsCount(where: PostWhereInput! = {}): Int
}

input TagCreateInput {
	name: String
	posts: PostRelateToManyForCreateInput
}

input TagManyRelationFilter {
	every: TagWhereInput
	none: TagWhereInput
	some: TagWhereInput
}

input TagOrderByInput {
	id: OrderDirection
	name: OrderDirection
}

input TagRelateToManyForCreateInput {
	connect: [TagWhereUniqueInput!]
	create: [TagCreateInput!]
}

input TagRelateToManyForUpdateInput {
	connect: [TagWhereUniqueInput!]
	create: [TagCreateInput!]
	disconnect: [TagWhereUniqueInput!]
	set: [TagWhereUniqueInput!]
}

input TagUpdateArgs {
	data: TagUpdateInput!
	where: TagWhereUniqueInput!
}

input TagUpdateInput {
	name: String
	posts: PostRelateToManyForUpdateInput
}

input TagWhereInput {
	AND: [TagWhereInput!]
	NOT: [TagWhereInput!]
	OR: [TagWhereInput!]
	id: IDFilter
	name: StringFilter
	posts: PostManyRelationFilter
}

input TagWhereUniqueInput {
	id: ID
}

type Task {
	description: String
	id: ID!
	title: String
}

input TaskCreateInput {
	description: String
	title: String
}

input TaskOrderByInput {
	description: OrderDirection
	id: OrderDirection
	title: OrderDirection
}

input TaskUpdateArgs {
	data: TaskUpdateInput!
	where: TaskWhereUniqueInput!
}

input TaskUpdateInput {
	description: String
	title: String
}

input TaskWhereInput {
	AND: [TaskWhereInput!]
	NOT: [TaskWhereInput!]
	OR: [TaskWhereInput!]
	description: StringFilter
	id: IDFilter
	title: StringFilter
}

input TaskWhereUniqueInput {
	id: ID
}

type User {
	email: String
	id: ID!
	name: String
	password: PasswordState
	posts(
		orderBy: [PostOrderByInput!]! = []
		skip: Int! = 0
		take: Int
		where: PostWhereInput! = {}
	): [Post!]
	postsCount(where: PostWhereInput! = {}): Int
}

type UserAuthenticationWithPasswordFailure {
	message: String!
}

union UserAuthenticationWithPasswordResult =
	  UserAuthenticationWithPasswordFailure
	| UserAuthenticationWithPasswordSuccess

type UserAuthenticationWithPasswordSuccess {
	item: User!
	sessionToken: String!
}

input UserCreateInput {
	email: String
	name: String
	password: String
	posts: PostRelateToManyForCreateInput
}

input UserOrderByInput {
	email: OrderDirection
	id: OrderDirection
	name: OrderDirection
}

input UserRelateToOneForCreateInput {
	connect: UserWhereUniqueInput
	create: UserCreateInput
}

input UserRelateToOneForUpdateInput {
	connect: UserWhereUniqueInput
	create: UserCreateInput
	disconnect: Boolean
}

input UserUpdateArgs {
	data: UserUpdateInput!
	where: UserWhereUniqueInput!
}

input UserUpdateInput {
	email: String
	name: String
	password: String
	posts: PostRelateToManyForUpdateInput
}

input UserWhereInput {
	AND: [UserWhereInput!]
	NOT: [UserWhereInput!]
	OR: [UserWhereInput!]
	email: StringFilter
	id: IDFilter
	name: StringFilter
	posts: PostManyRelationFilter
}

input UserWhereUniqueInput {
	email: String
	id: ID
}
